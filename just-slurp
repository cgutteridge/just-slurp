#!/usr/bin/perl

# CC0 - Public Domain 
# 2018

use FindBin;
use Data::Dumper;
use Digest::MD5 qw/md5_hex/;
my $BASE_DIR = $FindBin::Bin;
my $CACHE_DIR = "$BASE_DIR/cache";

my $PHANTOMJS_BIN = "$BASE_DIR/phantomjs-2.1.1-macosx/bin/phantomjs";

use warnings;
use strict;

my $todo = {};
foreach my $arg ( @ARGV ) {
	$todo->{$arg} = 1;
}


my $done = {};
my $t = time;
while( scalar keys %$todo ) {
	my $url_to_process = (sort keys %$todo)[0];
	my $contents = get_url( $url_to_process );
	next if( $contents eq "" );
	$done->{$url_to_process}=1;
	delete $todo->{$url_to_process};
	print STDERR "Last took: ".(time-$t)."\n";
	$t = time();
	print STDERR "Remaining: ".( scalar keys %$todo )." \n";

        # decide page type
	if( $url_to_process =~ m/\/area\// ) {
		# processing list of resturants
		
		# find a list of URLs in quotes
		my @urls = ();
		$contents =~ s!"(/[^/]+/menu)"!push @urls, $1!ge;
		foreach my $url ( @urls ) {
			$todo->{"https://www.just-eat.co.uk".$url} = 1;
		}
	}

	if( $url_to_process =~ m/\/menu$/ ) {
		$contents =~ s/&amp;/&/g; # hacky, but so's this whole script
		$contents =~ m/<h1[^>]*>([^<]+)/;
		my $resturantTitle = $1;

		my @sections = split( /<h3[^>]*>/, $contents );
		
		shift @sections;
		foreach my $section ( @sections ) {
			$section =~ m/^([^<]+)/;
			my $sectionTitle = $1;
		
			my @items = split( /<h4[^>]*>/, $section );
			shift @items;
		
			foreach my $item ( @items ) {
				$item =~ m/^([^<]+)/;
				my $itemTitle = $1;
		
				if( $item =~ m/<h5/ ) {
					my @opts = split( /<h5[^>]*>/, $item );
					shift @opts;
					
					foreach my $opt ( @opts ) {
						$opt =~ m/^([^<]+)/;
						my $optTitle = $1;
					
						print "$resturantTitle => $sectionTitle => $itemTitle => $optTitle\n";
					}
				} else {
					print "$resturantTitle => $sectionTitle => $itemTitle\n";
				}
		
				
			}
		}
	}

}
exit;

sub get_url {
	my( $url ) = @_;
	print STDERR "URL: $url\n";

	if( !-d $CACHE_DIR ) {
		mkdir( $CACHE_DIR );
	}
	my $file = $CACHE_DIR."/".md5_hex( $url );
	if( !-e $file ) {
		# quote untrusted data on the command line
		my $cmd = "$PHANTOMJS_BIN $BASE_DIR/save_page.js ".cmd_quote($url)." > ".cmd_quote($file);
		print STDERR $cmd."\n";
		`$cmd`;
	}

	open( my $fh, "<", $file ) || die "dang: $! ($file)";
	my $r = join( "", <$fh> );
	close $fh;

	if( length($r) < 10 ) { print STDERR "\nGah: $url\nDidn't get a file for some reason (it was really short)!\n\n"; unlink($file); return ""; }

	return $r;
}

sub cmd_quote {
	my( $term ) = @_;
	
	$term =~ s/'/'"'"'/g;

	return "'$term'";
}
